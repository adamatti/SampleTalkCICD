apply plugin: "idea"
apply plugin: "groovy"
apply plugin: "application"

applicationName = "sample"
mainClassName = "adamatti.Main"

repositories {
    mavenCentral()
}

dependencies {
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
	compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.12'
	compile group: 'com.sparkjava', name: 'spark-core', version: '2.5.5'
	compile group: 'org.codehaus.groovy.modules.http-builder', name: 'http-builder', version: '0.7.1'

	compile group: 'org.apache.camel', name: 'camel-spring', version: '2.19.1'
	compile group: 'org.apache.camel', name: 'camel-rabbitmq', version: '2.19.1'

	compile group: 'org.springframework.data', name: 'spring-data-mongodb', version: '1.10.1.RELEASE'

	compile group: 'org.springframework.boot', name: 'spring-boot-starter', version: '1.5.4.RELEASE'
	compile group: 'org.springframework.cloud', name: 'spring-cloud-starter', version: '1.2.3.RELEASE'
	compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-hystrix', version: '1.2.3.RELEASE'

	testCompile group: 'org.springframework', name: 'spring-test', version: '4.3.10.RELEASE'
	testCompile group: 'org.spockframework', name: 'spock-spring', version: '1.1-groovy-2.4'
	testCompile group: 'cglib', name: 'cglib-nodep', version: '3.2.5'
	testCompile 'junit:junit:4.12' //Required to run spock on cmd line
}

test {
	dependsOn 'cleanTest'
}

idea {
    module {
        downloadJavadoc = false
        downloadSources = false

        iml.withXml {
            def node = it.asNode()
            def content = node.component.find { it.'@name' == 'NewModuleRootManager' }.content[0]
            content.sourceFolder.each { sourceFolder ->
                if (sourceFolder.@url?.endsWith('/resources')) {
                    sourceFolder.attributes().with {
                        boolean isTestSource = (remove('isTestSource') == 'true')
                        put('type', isTestSource ? 'java-test-resource' : 'java-resource')
                    }
                }
            }
        }
    }
}
